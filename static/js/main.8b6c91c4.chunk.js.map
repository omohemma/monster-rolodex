{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","utils/data.utils.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["CardComponent","monster","id","name","email","className","src","alt","CardList","monsters","map","SearchBoxComponent","placeholder","HandleChange","type","onChange","getData","url","a","fetch","response","json","App","useState","searchField","setSearchField","setMonsters","filteredMonsters","setFilteredMonsters","useEffect","users","fetchMonsters","newFilteredMonsters","filter","toLowerCase","includes","event","searchFieldString","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAOaA,EAAgB,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QACpBC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MAEjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAG,+BAA0BJ,EAA1B,0BAAsDK,IAAKJ,IACnE,6BAAKA,IACL,4BAAIC,QCJCI,EAAW,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,SACxB,OAAO,qBAAKJ,UAAU,YAAf,SAEHI,EAASC,KAAI,SAAAT,GAAO,OAAI,cAAC,EAAD,CAAgCA,QAASA,GAArBA,EAAQC,UCH5CS,G,MAAqB,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,aAChD,OAAO,uBAAOR,UAAU,SAASS,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCHxEG,EAAO,uCAAI,WAAUC,GAAV,eAAAC,EAAA,sEACGC,MAAMF,GADT,cACdG,EADc,gBAEPA,EAASC,OAFF,mFAAJ,sDC2CLC,EApCH,WAEV,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,mBAAoB,IAApD,mBAAOd,EAAP,KAAiBiB,EAAjB,KACA,EAAgDH,mBAASd,GAAzD,mBAAOkB,EAAP,KAAyBC,EAAzB,KAEAC,qBAAU,YACW,uCAAG,4BAAAX,EAAA,sEACAF,EAAmB,8CADnB,OACdc,EADc,OAEpBJ,EAAYI,GAFQ,2CAAH,qDAInBC,KACC,IAeH,OANAF,qBAAU,WACR,IAAMG,EAAsBvB,EAASwB,QAAO,SAAAhC,GAAO,OAAIA,EAAQE,KAAK+B,cAAcC,SAASX,EAAYU,kBACvGN,EAAoBI,KACnB,CAACvB,EAAUe,IAIZ,sBAAKnB,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAoBO,YAAY,kBAAkBC,aAhBjC,SAACuB,GACpB,IAAMC,EAAoBD,EAAME,OAAOC,MAEvCd,EAAeY,MAcb,cAAC,EAAD,CAAU5B,SAAUkB,QCjCXa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8b6c91c4.chunk.js","sourcesContent":["import './card.styles.css'\r\nimport {Monster} from \"../../App\";\r\n\r\ntype CardProps = {\r\n    monster: Monster\r\n}\r\n\r\nexport const CardComponent = ({monster}: CardProps) => {\r\n    const {id, name, email} = monster\r\n\r\n    return <div className='card-container'>\r\n        <img src={`https://robohash.org/${id}?set=set2&size=180x180`} alt={name}/>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n}","import './card-list.styles.css'\r\nimport {CardComponent} from \"../card/card.component\";\r\nimport {Monster} from \"../../App\";\r\n\r\ntype CardListProps = {\r\n  monsters: Monster[],\r\n}\r\n// Houses The cards which is received by props - like slot in vue.js\r\n// Receives props from Parent and passes to Card Component\r\nexport const CardList = ({monsters} : CardListProps) => {\r\n  return <div className=\"card-list\">\r\n    {\r\n      monsters.map(monster => <CardComponent key={monster.id} monster={monster}/>)\r\n    }\r\n  </div>\r\n}","import {ChangeEvent} from \"react\";\r\n\r\nimport './search-box.styles.css'\r\n\r\ntype SearchBoxProps = {\r\n  placeholder?: string;\r\n  HandleChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const  SearchBoxComponent = ({placeholder, HandleChange} : SearchBoxProps) => {\r\n  return <input className='search' type=\"search\" placeholder={placeholder} onChange={HandleChange}/>\r\n}","/**\r\n * @param url\r\n * getData receives an url of string\r\n *  uses fetch on the url\r\n *  and return response converted to json which we know to be a Promise\r\n *  <T> represent a generic we expect to return from API call\r\n */\r\nexport const getData =  async <T>(url:string) : Promise<T> => {\r\n    const response = await fetch(url)\r\n    return await response.json()\r\n}","// import logo from './logo.svg';\nimport './App.css';\nimport {ChangeEvent, useEffect, useState} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBoxComponent} from \"./components/search-box/search-box.component\";\nimport {getData} from \"./utils/data.utils\";\n\nexport type Monster = {\n  id: string,\n  name: string,\n  email: string,\n}\n\n// Switch to Functional Component\nconst App = () => {\n  // [value, setValue] = useState('initial state')\n  const [searchField, setSearchField] = useState('');\n  const [monsters, setMonsters] = useState<Monster[]>([]);\n  const [filteredMonsters, setFilteredMonsters] = useState(monsters);\n\n  useEffect(() => {\n    const fetchMonsters = async () => {\n      const users = await getData<Monster[]>(\"https://jsonplaceholder.typicode.com/users\")\n      setMonsters(users);\n    }\n    fetchMonsters();\n  }, [])\n\n  const handleChange = (event : ChangeEvent<HTMLInputElement>) : void => {\n    const searchFieldString = event.target.value;\n    // this only rerender component if searchFieldString is different from the initial state of searchField\n    setSearchField(searchFieldString) // setState equivalent,\n  }\n\n  // Filter Monsters only when monsters array or search field changes\n  useEffect(() => {\n    const newFilteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    setFilteredMonsters(newFilteredMonsters)\n  }, [monsters, searchField])\n\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex </h1>\n      <SearchBoxComponent placeholder='Search Monsters' HandleChange={handleChange}/>\n      <CardList monsters={filteredMonsters}></CardList>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; // to write JSx in javascript file\nimport ReactDOM from 'react-dom'; // to interact DOM to effect the state changes in our app\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}